#!/usr/bin/env python

"""
@package mi.dataset.parser.test.test_vel3d_l_wfp
@file marine-integrations/mi/dataset/parser/test/test_vel3d_l_wfp.py
@author Steve Myerson (Raytheon)
@brief Test code for a vel3d_l_wfp parser for recovered and telemetered data
"""

from nose.plugins.attrib import attr

import os

from mi.dataset.test.test_parser import BASE_RESOURCE_PATH

from mi.core.log import get_logger; log = get_logger()
from mi.core.exceptions import SampleException
from StringIO import StringIO

from mi.dataset.test.test_parser import ParserUnitTestCase
from mi.dataset.dataset_parser import DataSetDriverConfigKeys

from mi.dataset.parser.vel3d_l_wfp import \
    Vel3dLWfpStateKey, \
    Vel3dLWfpParser, \
    Vel3dLWfpSioParser, \
    Vel3dLWfpInstrumentParticle, \
    Vel3dLWfpInstrumentRecoveredParticle, \
    Vel3dLWfpMetadataRecoveredParticle, \
    Vel3dLWfpSioMuleMetadataParticle

# Recovered Record #1 has 1 instrument record.
REC_RECORD_1 = \
    '\x00\x00\x01\x46\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01\x02'  \
    '\xD4\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00\x40'  \
    '\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00\x42'  \
    '\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x52\xE6\x3C\x32\x52\xE6'  \
    '\x54\xDF'

# Expected results for Recovered record #1.
REC_EXPECTED_FIELDS_RECORD_1_1 = (1, 2, 3, 1, 2, 2004, 101.0, 201.0, 301.0,
                                  1001.0, 2001.0, 3001.0,
                                  10001.0, 20001.0, 30001.0, 40001.0)

REC_EXPECTED_FIELDS_RECORD_1_META = (1390826719, 1390820402, 1390826719, 65535, 1)


# Recovered Record #2 has 2 instrument records.
REC_RECORD_2 = \
    '\x00\x00\x01\x75\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x02\x03\x04\x02\x03'  \
    '\xD4\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80'  \
    '\x7A\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44'  \
    '\x9C\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04\xD4'  \
    '\x07\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0\x7A'  \
    '\x44\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46\x9C'  \
    '\x46\x00\x66\xEA\x46\x00\x43\x1C\x47\x52\xE6\x3C\x33\x52\xE6\x54'  \
    '\xE0'

# Expected results for Recovered record #2.
REC_EXPECTED_FIELDS_RECORD_2_1 = (2, 3, 4, 2, 3, 2004, 102.0, 202.0, 302.0,
                                  1002.0, 2002.0, 3002.0,
                                  10002.0, 20002.0, 30002.0, 40002.0)

REC_EXPECTED_FIELDS_RECORD_2_2 = (3, 4, 5, 3, 4, 2004, 103.0, 203.0, 303.0,
                                  1003.0, 2003.0, 3003.0,
                                  10003.0, 20003.0, 30003.0, 40003.0)

REC_EXPECTED_FIELDS_RECORD_2_META = (1390826720, 1390820403, 1390826720, 65535, 2)


# Recovered Record #3 has 3 instrument records.
REC_RECORD_3 = \
    '\x00\x00\x01\xA4\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x04\x05\x06\x04\x05'  \
    '\xD4\x07\x00\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00'  \
    '\x7B\x44\x00\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48'  \
    '\x9C\x46\x00\x68\xEA\x46\x00\x44\x1C\x47\x05\x06\x07\x05\x06\xD4'  \
    '\x07\x00\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40\x7B'  \
    '\x44\x00\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A\x9C'  \
    '\x46\x00\x6A\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07\xD4\x07'  \
    '\x00\x00\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80\x7B\x44'  \
    '\x00\xC0\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C\x9C\x46'  \
    '\x00\x6C\xEA\x46\x00\x46\x1C\x47\x52\xE6\x3C\x34\x52\xE6\x54\xE1'

# Expected results for Recovered record #3.
REC_EXPECTED_FIELDS_RECORD_3_1 = (4, 5, 6, 4, 5, 2004, 104.0, 204.0, 304.0,
                                  1004.0, 2004.0, 3004.0,
                                  10004.0, 20004.0, 30004.0, 40004.0)

REC_EXPECTED_FIELDS_RECORD_3_2 = (5, 6, 7, 5, 6, 2004, 105.0, 205.0, 305.0,
                                  1005.0, 2005.0, 3005.0,
                                  10005.0, 20005.0, 30005.0, 40005.0)

REC_EXPECTED_FIELDS_RECORD_3_3 = (6, 7, 8, 6, 7, 2004, 106.0, 206.0, 306.0,
                                  1006.0, 2006.0, 3006.0,
                                  10006.0, 20006.0, 30006.0, 40006.0)

REC_EXPECTED_FIELDS_RECORD_3_META = (1390826721, 1390820404, 1390826721, 65535, 3)


# Recovered Record #4 has 4 instrument records.
REC_RECORD_4 = \
    '\x00\x00\x01\xD3\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x07\x08\x09\x07\x08'  \
    '\xD4\x07\x00\x00\xD6\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0'  \
    '\x7B\x44\x00\xE0\xFA\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E'  \
    '\x9C\x46\x00\x6E\xEA\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xD4'  \
    '\x07\x00\x00\xD8\x42\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C'  \
    '\x44\x00\x00\xFB\x44\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C'  \
    '\x46\x00\x70\xEA\x46\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xD4\x07'  \
    '\x00\x00\xDA\x42\x00\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44'  \
    '\x00\x20\xFB\x44\x00\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46'  \
    '\x00\x72\xEA\x46\x00\x49\x1C\x47\x0A\x0B\x0C\x0A\x0B\xD4\x07\x00'  \
    '\x00\xDC\x42\x00\x00\x52\x43\x00\x00\x9B\x43\x00\x80\x7C\x44\x00'  \
    '\x40\xFB\x44\x00\x20\x3C\x45\x00\x68\x1C\x46\x00\x54\x9C\x46\x00'  \
    '\x74\xEA\x46\x00\x4A\x1C\x47\x52\xE6\x3C\x35\x52\xE6\x54\xE2'

# Expected results for Recovered record #4.
REC_EXPECTED_FIELDS_RECORD_4_1 = (7, 8, 9, 7, 8, 2004, 107.0, 207.0, 307.0,
                                  1007.0, 2007.0, 3007.0,
                                  10007.0, 20007.0, 30007.0, 40007.0)

REC_EXPECTED_FIELDS_RECORD_4_2 = (8, 9, 10, 8, 9, 2004, 108.0, 208.0, 308.0,
                                  1008.0, 2008.0, 3008.0,
                                  10008.0, 20008.0, 30008.0, 40008.0)

REC_EXPECTED_FIELDS_RECORD_4_3 = (9, 10, 11, 9, 10, 2004, 109.0, 209.0, 309.0,
                                  1009.0, 2009.0, 3009.0,
                                  10009.0, 20009.0, 30009.0, 40009.0)

REC_EXPECTED_FIELDS_RECORD_4_4 = (10, 11, 12, 10, 11, 2004, 110.0, 210.0, 310.0,
                                  1010.0, 2010.0, 3010.0,
                                  10010.0, 20010.0, 30010.0, 40010.0)

REC_EXPECTED_FIELDS_RECORD_4_META = (1390826722, 1390820405, 1390826722, 65535, 4)


# Recovered Record #10 has 10 instrument records.
REC_RECORD_10 = \
    '\x00\x00\x02\xED\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01\x02'  \
    '\xD1\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00\x40'  \
    '\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00\x42'  \
    '\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x02\x03\x04\x02\x03\xD1'  \
    '\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80\x7A'  \
    '\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44\x9C'  \
    '\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04\xD1\x07'  \
    '\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0\x7A\x44'  \
    '\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46\x9C\x46'  \
    '\x00\x66\xEA\x46\x00\x43\x1C\x47\x04\x05\x06\x04\x05\xD1\x07\x00'  \
    '\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00\x7B\x44\x00'  \
    '\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48\x9C\x46\x00'  \
    '\x68\xEA\x46\x00\x44\x1C\x47\x05\x06\x07\x05\x06\xD1\x07\x00\x00'  \
    '\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40\x7B\x44\x00\xA0'  \
    '\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A\x9C\x46\x00\x6A'  \
    '\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07\xD1\x07\x00\x00\xD4'  \
    '\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80\x7B\x44\x00\xC0\xFA'  \
    '\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C\x9C\x46\x00\x6C\xEA'  \
    '\x46\x00\x46\x1C\x47\x07\x08\x09\x07\x08\xD1\x07\x00\x00\xD6\x42'  \
    '\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0\x7B\x44\x00\xE0\xFA\x44'  \
    '\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E\x9C\x46\x00\x6E\xEA\x46'  \
    '\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xD1\x07\x00\x00\xD8\x42\x00'  \
    '\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C\x44\x00\x00\xFB\x44\x00'  \
    '\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C\x46\x00\x70\xEA\x46\x00'  \
    '\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xD1\x07\x00\x00\xDA\x42\x00\x00'  \
    '\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44\x00\x20\xFB\x44\x00\x10'  \
    '\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46\x00\x72\xEA\x46\x00\x49'  \
    '\x1C\x47\x0A\x0B\x0C\x0A\x0B\xD1\x07\x00\x00\xDC\x42\x00\x00\x52'  \
    '\x43\x00\x00\x9B\x43\x00\x80\x7C\x44\x00\x40\xFB\x44\x00\x20\x3C'  \
    '\x45\x00\x68\x1C\x46\x00\x54\x9C\x46\x00\x74\xEA\x46\x00\x4A\x1C'  \
    '\x47\x52\xE6\x3C\x32\x52\xE6\x54\xDF'

# Expected results for Recovered record #10.
REC_EXPECTED_FIELDS_RECORD_10_1 = (1, 2, 3, 1, 2, 2001, 101.0, 201.0, 301.0,
                                   1001.0, 2001.0, 3001.0,
                                   10001.0, 20001.0, 30001.0, 40001.0)

REC_EXPECTED_FIELDS_RECORD_10_2 = (2, 3, 4, 2, 3, 2001, 102.0, 202.0, 302.0,
                                   1002.0, 2002.0, 3002.0,
                                   10002.0, 20002.0, 30002.0, 40002.0)

REC_EXPECTED_FIELDS_RECORD_10_3 = (3, 4, 5, 3, 4, 2001, 103.0, 203.0, 303.0,
                                   1003.0, 2003.0, 3003.0,
                                   10003.0, 20003.0, 30003.0, 40003.0)

REC_EXPECTED_FIELDS_RECORD_10_4 = (4, 5, 6, 4, 5, 2001, 104.0, 204.0, 304.0,
                                   1004.0, 2004.0, 3004.0,
                                   10004.0, 20004.0, 30004.0, 40004.0)

REC_EXPECTED_FIELDS_RECORD_10_5 = (5, 6, 7, 5, 6, 2001, 105.0, 205.0, 305.0,
                                   1005.0, 2005.0, 3005.0,
                                   10005.0, 20005.0, 30005.0, 40005.0)

REC_EXPECTED_FIELDS_RECORD_10_6 = (6, 7, 8, 6, 7, 2001, 106.0, 206.0, 306.0,
                                   1006.0, 2006.0, 3006.0,
                                   10006.0, 20006.0, 30006.0, 40006.0)

REC_EXPECTED_FIELDS_RECORD_10_7 = (7, 8, 9, 7, 8, 2001, 107.0, 207.0, 307.0,
                                   1007.0, 2007.0, 3007.0,
                                   10007.0, 20007.0, 30007.0, 40007.0)

REC_EXPECTED_FIELDS_RECORD_10_8 = (8, 9, 10, 8, 9, 2001, 108.0, 208.0, 308.0,
                                   1008.0, 2008.0, 3008.0,
                                   10008.0, 20008.0, 30008.0, 40008.0)

REC_EXPECTED_FIELDS_RECORD_10_9 = (9, 10, 11, 9, 10, 2001, 109.0, 209.0, 309.0,
                                   1009.0, 2009.0, 3009.0,
                                   10009.0, 20009.0, 30009.0, 40009.0)

REC_EXPECTED_FIELDS_RECORD_10_10 = (10, 11, 12, 10, 11, 2001, 110.0, 210.0, 310.0,
                                    1010.0, 2010.0, 3010.0,
                                    10010.0, 20010.0, 30010.0, 40010.0)

REC_EXPECTED_FIELDS_RECORD_10_META = (1390826719, 1390820402, 1390826719, 65535, 10)


# Recovered Record 2_10 has 2 blocks, with 4 instrument records
# in the first block and 6 instrument records in the second block.
REC_RECORD_2_10 = \
    '\x00\x00\x01\xD3\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01\x02'  \
    '\xD2\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00\x40'  \
    '\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00\x42'  \
    '\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x02\x03\x04\x02\x03\xD2'  \
    '\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80\x7A'  \
    '\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44\x9C'  \
    '\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04\xD2\x07'  \
    '\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0\x7A\x44'  \
    '\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46\x9C\x46'  \
    '\x00\x66\xEA\x46\x00\x43\x1C\x47\x04\x05\x06\x04\x05\xD2\x07\x00'  \
    '\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00\x7B\x44\x00'  \
    '\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48\x9C\x46\x00'  \
    '\x68\xEA\x46\x00\x44\x1C\x47\x52\xE6\x3C\x32\x52\xE6\x54\xDF' \
    '\x00\x00\x02\x31\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x05\x06\x07\x05\x06'  \
    '\xD2\x07\x00\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40'  \
    '\x7B\x44\x00\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A'  \
    '\x9C\x46\x00\x6A\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07\xD2'  \
    '\x07\x00\x00\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80\x7B'  \
    '\x44\x00\xC0\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C\x9C'  \
    '\x46\x00\x6C\xEA\x46\x00\x46\x1C\x47\x07\x08\x09\x07\x08\xD2\x07'  \
    '\x00\x00\xD6\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0\x7B\x44'  \
    '\x00\xE0\xFA\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E\x9C\x46'  \
    '\x00\x6E\xEA\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xD2\x07\x00'  \
    '\x00\xD8\x42\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C\x44\x00'  \
    '\x00\xFB\x44\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C\x46\x00'  \
    '\x70\xEA\x46\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xD2\x07\x00\x00'  \
    '\xDA\x42\x00\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44\x00\x20'  \
    '\xFB\x44\x00\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46\x00\x72'  \
    '\xEA\x46\x00\x49\x1C\x47\x0A\x0B\x0C\x0A\x0B\xD2\x07\x00\x00\xDC'  \
    '\x42\x00\x00\x52\x43\x00\x00\x9B\x43\x00\x80\x7C\x44\x00\x40\xFB'  \
    '\x44\x00\x20\x3C\x45\x00\x68\x1C\x46\x00\x54\x9C\x46\x00\x74\xEA'  \
    '\x46\x00\x4A\x1C\x47\x52\xE6\x3C\x33\x52\xE6\x54\xE0'

# Expected results for Recovered record #2-10.
REC_EXPECTED_FIELDS_RECORD_2_10_1_1 = (1, 2, 3, 1, 2, 2002, 101.0, 201.0, 301.0,
                                      1001.0, 2001.0, 3001.0,
                                      10001.0, 20001.0, 30001.0, 40001.0)

REC_EXPECTED_FIELDS_RECORD_2_10_1_2 = (2, 3, 4, 2, 3, 2002, 102.0, 202.0, 302.0,
                                      1002.0, 2002.0, 3002.0,
                                      10002.0, 20002.0, 30002.0, 40002.0)

REC_EXPECTED_FIELDS_RECORD_2_10_1_3 = (3, 4, 5, 3, 4, 2002, 103.0, 203.0, 303.0,
                                      1003.0, 2003.0, 3003.0,
                                      10003.0, 20003.0, 30003.0, 40003.0)

REC_EXPECTED_FIELDS_RECORD_2_10_1_4 = (4, 5, 6, 4, 5, 2002, 104.0, 204.0, 304.0,
                                       1004.0, 2004.0, 3004.0,
                                       10004.0, 20004.0, 30004.0, 40004.0)

REC_EXPECTED_FIELDS_RECORD_2_10_1_META = (1390826719, 1390820402, 1390826719, 65535, 4)


REC_EXPECTED_FIELDS_RECORD_2_10_2_1 = (5, 6, 7, 5, 6, 2002, 105.0, 205.0, 305.0,
                                      1005.0, 2005.0, 3005.0,
                                      10005.0, 20005.0, 30005.0, 40005.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_2 = (6, 7, 8, 6, 7, 2002, 106.0, 206.0, 306.0,
                                      1006.0, 2006.0, 3006.0,
                                      10006.0, 20006.0, 30006.0, 40006.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_3 = (7, 8, 9, 7, 8, 2002, 107.0, 207.0, 307.0,
                                       1007.0, 2007.0, 3007.0,
                                       10007.0, 20007.0, 30007.0, 40007.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_4 = (8, 9, 10, 8, 9, 2002, 108.0, 208.0, 308.0,
                                       1008.0, 2008.0, 3008.0,
                                       10008.0, 20008.0, 30008.0, 40008.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_5 = (9, 10, 11, 9, 10, 2002, 109.0, 209.0, 309.0,
                                       1009.0, 2009.0, 3009.0,
                                       10009.0, 20009.0, 30009.0, 40009.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_6 = (10, 11, 12, 10, 11, 2002, 110.0, 210.0, 310.0,
                                       1010.0, 2010.0, 3010.0,
                                       10010.0, 20010.0, 30010.0, 40010.0)

REC_EXPECTED_FIELDS_RECORD_2_10_2_META = (1390826720, 1390820403, 1390826720, 65535, 6)


# Recovered file with excess bytes at the end of the metadata record.
# Used to test exception processing.  No expected results.
REC_EXCESS_METADATA = \
    '\x00\x00\x01\x51\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01\x02'  \
    '\xE4\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00\x40'  \
    '\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00\x42'  \
    '\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x52\xE6\x3C\x32\x52\xE6'  \
    '\x54\xDF\x45\x78\x63\x65\x73\x73\x20\x64\x61\x74\x61'


# Telemetered Record #1 has 1 SIO block with 1 instrument record.
TEL_RECORD_1 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x35\x34\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x31\x5F\x30\x39\x44\x34'  \
    '\x02\x00\x00\x01\x46\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01'  \
    '\x02\xDE\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00'  \
    '\x40\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00'  \
    '\x42\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x52\xE6\x3C\x32\x52'  \
    '\xE6\x54\xDF\x00\x0A\x03'

# Expected results for Telemetered record #1.
TEL_EXPECTED_FIELDS_RECORD_1_1 = (1, 2, 3, 1, 2, 2014, 101.0, 201.0, 301.0,
                                  1001.0, 2001.0, 3001.0,
                                  10001.0, 20001.0, 30001.0, 40001.0)

TEL_EXPECTED_FIELDS_RECORD_1_META = (1374902331, 1390820402, 1390826719, 65535,
                                     1, 10, 1374902331)


# Telemetered Record #2 has 1 SIO block with 2 instrument records.
TEL_RECORD_2 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x38\x31\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x32\x5F\x37\x41\x43\x41'  \
    '\x02\x00\x00\x01\x75\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x02\x03\x04\x02'  \
    '\x03\xDE\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00'  \
    '\x80\x7A\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00'  \
    '\x44\x9C\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04'  \
    '\xDE\x07\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0'  \
    '\x7A\x44\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46'  \
    '\x9C\x46\x00\x66\xEA\x46\x00\x43\x1C\x47\x52\xE6\x3C\x33\x52\xE6'  \
    '\x54\xE0\x03'

# Expected results for Telemetered record #2.
TEL_EXPECTED_FIELDS_RECORD_2_1 = (2, 3, 4, 2, 3, 2014, 102.0, 202.0, 302.0,
                                  1002.0, 2002.0, 3002.0,
                                  10002.0, 20002.0, 30002.0, 40002.0)

TEL_EXPECTED_FIELDS_RECORD_2_2 = (3, 4, 5, 3, 4, 2014, 103.0, 203.0, 303.0,
                                  1003.0, 2003.0, 3003.0,
                                  10003.0, 20003.0, 30003.0, 40003.0)

TEL_EXPECTED_FIELDS_RECORD_2_META = (1374902331, 1390820403, 1390826720, 65535,
                                     2, None, 1374902331)


# Telemetered Record #3 has 1 SIO block with 3 instrument records.
TEL_RECORD_3 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x42\x32\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x33\x5F\x37\x32\x42\x37'  \
    '\x02\x00\x00\x01\xA4\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x04\x05\x06\x04'  \
    '\x05\xDE\x07\x00\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00'  \
    '\x00\x7B\x44\x00\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00'  \
    '\x48\x9C\x46\x00\x68\xEA\x46\x00\x44\x1C\x47\x05\x06\x07\x05\x06'  \
    '\xDE\x07\x00\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40'  \
    '\x7B\x44\x00\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A'  \
    '\x9C\x46\x00\x6A\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07\xDE'  \
    '\x07\x00\x00\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80\x7B'  \
    '\x44\x00\xC0\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C\x9C'  \
    '\x46\x00\x6C\xEA\x46\x00\x46\x1C\x47\x52\xE6\x3C\x34\x52\xE6\x54'  \
    '\xE1\x00\x0C\x03'

# Expected results for Telemetered record #3.
TEL_EXPECTED_FIELDS_RECORD_3_1 = (4, 5, 6, 4, 5, 2014, 104.0, 204.0, 304.0,
                                  1004.0, 2004.0, 3004.0,
                                  10004.0, 20004.0, 30004.0, 40004.0)

TEL_EXPECTED_FIELDS_RECORD_3_2 = (5, 6, 7, 5, 6, 2014, 105.0, 205.0, 305.0,
                                  1005.0, 2005.0, 3005.0,
                                  10005.0, 20005.0, 30005.0, 40005.0)

TEL_EXPECTED_FIELDS_RECORD_3_3 = (6, 7, 8, 6, 7, 2014, 106.0, 206.0, 306.0,
                                  1006.0, 2006.0, 3006.0,
                                  10006.0, 20006.0, 30006.0, 40006.0)

TEL_EXPECTED_FIELDS_RECORD_3_META = (1374902331, 1390820404, 1390826721, 65535,
                                     3, 12, 1374902331)


# Telemetered Record #4 has 1 SIO block with 4 instrument records.
TEL_RECORD_4 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x44\x46\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x34\x5F\x45\x42\x30\x42'  \
    '\x02\x00\x00\x01\xD3\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x07\x08\x09\x07'  \
    '\x08\xDE\x07\x00\x00\xD6\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00'  \
    '\xC0\x7B\x44\x00\xE0\xFA\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00'  \
    '\x4E\x9C\x46\x00\x6E\xEA\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09'  \
    '\xDE\x07\x00\x00\xD8\x42\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00'  \
    '\x7C\x44\x00\x00\xFB\x44\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50'  \
    '\x9C\x46\x00\x70\xEA\x46\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xDE'  \
    '\x07\x00\x00\xDA\x42\x00\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C'  \
    '\x44\x00\x20\xFB\x44\x00\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C'  \
    '\x46\x00\x72\xEA\x46\x00\x49\x1C\x47\x0A\x0B\x0C\x0A\x0B\xDE\x07'  \
    '\x00\x00\xDC\x42\x00\x00\x52\x43\x00\x00\x9B\x43\x00\x80\x7C\x44'  \
    '\x00\x40\xFB\x44\x00\x20\x3C\x45\x00\x68\x1C\x46\x00\x54\x9C\x46'  \
    '\x00\x74\xEA\x46\x00\x4A\x1C\x47\x52\xE6\x3C\x35\x52\xE6\x54\xE2'  \
    '\x03'

# Expected results for Telemetered record #4.
TEL_EXPECTED_FIELDS_RECORD_4_1 = (7, 8, 9, 7, 8, 2014, 107.0, 207.0, 307.0,
                                  1007.0, 2007.0, 3007.0,
                                  10007.0, 20007.0, 30007.0, 40007.0)

TEL_EXPECTED_FIELDS_RECORD_4_2 = (8, 9, 10, 8, 9, 2014, 108.0, 208.0, 308.0,
                                  1008.0, 2008.0, 3008.0,
                                  10008.0, 20008.0, 30008.0, 40008.0)

TEL_EXPECTED_FIELDS_RECORD_4_3 = (9, 10, 11, 9, 10, 2014, 109.0, 209.0, 309.0,
                                  1009.0, 2009.0, 3009.0,
                                  10009.0, 20009.0, 30009.0, 40009.0)

TEL_EXPECTED_FIELDS_RECORD_4_4 = (10, 11, 12, 10, 11, 2014, 110.0, 210.0, 310.0,
                                  1010.0, 2010.0, 3010.0,
                                  10010.0, 20010.0, 30010.0, 40010.0)

TEL_EXPECTED_FIELDS_RECORD_4_META = (1374902331, 1390820405, 1390826722, 65535,
                                     4, None, 1374902331)


# Telemetered Record #10 has 1 SIO block with 10 instrument records.
TEL_RECORD_10 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x32\x46\x42\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x31\x5F\x45\x38\x33\x41'  \
    '\x02\x00\x00\x02\xED\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01'  \
    '\x02\xDB\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00'  \
    '\x40\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00'  \
    '\x42\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x02\x03\x04\x02\x03'  \
    '\xDB\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80'  \
    '\x7A\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44'  \
    '\x9C\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04\xDB'  \
    '\x07\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0\x7A'  \
    '\x44\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46\x9C'  \
    '\x46\x00\x66\xEA\x46\x00\x43\x1C\x47\x04\x05\x06\x04\x05\xDB\x07'  \
    '\x00\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00\x7B\x44'  \
    '\x00\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48\x9C\x46'  \
    '\x00\x68\xEA\x46\x00\x44\x1C\x47\x05\x06\x07\x05\x06\xDB\x07\x00'  \
    '\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40\x7B\x44\x00'  \
    '\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A\x9C\x46\x00'  \
    '\x6A\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07\xDB\x07\x00\x00'  \
    '\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80\x7B\x44\x00\xC0'  \
    '\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C\x9C\x46\x00\x6C'  \
    '\xEA\x46\x00\x46\x1C\x47\x07\x08\x09\x07\x08\xDB\x07\x00\x00\xD6'  \
    '\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0\x7B\x44\x00\xE0\xFA'  \
    '\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E\x9C\x46\x00\x6E\xEA'  \
    '\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xDB\x07\x00\x00\xD8\x42'  \
    '\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C\x44\x00\x00\xFB\x44'  \
    '\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C\x46\x00\x70\xEA\x46'  \
    '\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xDB\x07\x00\x00\xDA\x42\x00'  \
    '\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44\x00\x20\xFB\x44\x00'  \
    '\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46\x00\x72\xEA\x46\x00'  \
    '\x49\x1C\x47\x0A\x0B\x0C\x0A\x0B\xDB\x07\x00\x00\xDC\x42\x00\x00'  \
    '\x52\x43\x00\x00\x9B\x43\x00\x80\x7C\x44\x00\x40\xFB\x44\x00\x20'  \
    '\x3C\x45\x00\x68\x1C\x46\x00\x54\x9C\x46\x00\x74\xEA\x46\x00\x4A'  \
    '\x1C\x47\x52\xE6\x3C\x32\x52\xE6\x54\xDF\x00\x0A\x03'

# Expected results for Telemetered record #10.
TEL_EXPECTED_FIELDS_RECORD_10_1 = (1, 2, 3, 1, 2, 2011, 101.0, 201.0, 301.0,
                                   1001.0, 2001.0, 3001.0,
                                   10001.0, 20001.0, 30001.0, 40001.0)

TEL_EXPECTED_FIELDS_RECORD_10_2 = (2, 3, 4, 2, 3, 2011, 102.0, 202.0, 302.0,
                                   1002.0, 2002.0, 3002.0,
                                   10002.0, 20002.0, 30002.0, 40002.0)

TEL_EXPECTED_FIELDS_RECORD_10_3 = (3, 4, 5, 3, 4, 2011, 103.0, 203.0, 303.0,
                                   1003.0, 2003.0, 3003.0,
                                   10003.0, 20003.0, 30003.0, 40003.0)

TEL_EXPECTED_FIELDS_RECORD_10_4 = (4, 5, 6, 4, 5, 2011, 104.0, 204.0, 304.0,
                                   1004.0, 2004.0, 3004.0,
                                   10004.0, 20004.0, 30004.0, 40004.0)

TEL_EXPECTED_FIELDS_RECORD_10_5 = (5, 6, 7, 5, 6, 2011, 105.0, 205.0, 305.0,
                                   1005.0, 2005.0, 3005.0,
                                   10005.0, 20005.0, 30005.0, 40005.0)

TEL_EXPECTED_FIELDS_RECORD_10_6 = (6, 7, 8, 6, 7, 2011, 106.0, 206.0, 306.0,
                                   1006.0, 2006.0, 3006.0,
                                   10006.0, 20006.0, 30006.0, 40006.0)

TEL_EXPECTED_FIELDS_RECORD_10_7 = (7, 8, 9, 7, 8, 2011, 107.0, 207.0, 307.0,
                                   1007.0, 2007.0, 3007.0,
                                   10007.0, 20007.0, 30007.0, 40007.0)

TEL_EXPECTED_FIELDS_RECORD_10_8 = (8, 9, 10, 8, 9, 2011, 108.0, 208.0, 308.0,
                                   1008.0, 2008.0, 3008.0,
                                   10008.0, 20008.0, 30008.0, 40008.0)

TEL_EXPECTED_FIELDS_RECORD_10_9 = (9, 10, 11, 9, 10, 2011, 109.0, 209.0, 309.0,
                                   1009.0, 2009.0, 3009.0,
                                   10009.0, 20009.0, 30009.0, 40009.0)

TEL_EXPECTED_FIELDS_RECORD_10_10 = (10, 11, 12, 10, 11, 2011, 110.0, 210.0, 310.0,
                                    1010.0, 2010.0, 3010.0,
                                    10010.0, 20010.0, 30010.0, 40010.0)

TEL_EXPECTED_FIELDS_RECORD_10_META = (1374902331, 1390820402, 1390826719, 65535,
                                      10, 10, 1374902331)


# Telemetered Record 2_10 has 2 SIO blocks, with 4 instrument records
# in the first block and 6 instrument records in the second block.
TEL_RECORD_2_10 = \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x45\x31\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x31\x5F\x30\x46\x42\x41'  \
    '\x02\x00\x00\x01\xD3\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01'  \
    '\x02\xDC\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00'  \
    '\x40\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00'  \
    '\x42\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x02\x03\x04\x02\x03'  \
    '\xDC\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80'  \
    '\x7A\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44'  \
    '\x9C\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x03\x04\x05\x03\x04\xDC'  \
    '\x07\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00\xC0\x7A'  \
    '\x44\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00\x46\x9C'  \
    '\x46\x00\x66\xEA\x46\x00\x43\x1C\x47\x04\x05\x06\x04\x05\xDC\x07'  \
    '\x00\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00\x7B\x44'  \
    '\x00\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48\x9C\x46'  \
    '\x00\x68\xEA\x46\x00\x44\x1C\x47\x52\xE6\x3C\x32\x52\xE6\x54\xDF'  \
    '\x00\x0A\x03' \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x32\x33\x44\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x32\x5F\x33\x44\x32\x33'  \
    '\x02\x00\x00\x02\x31\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x05\x06\x07\x05'  \
    '\x06\xDC\x07\x00\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00'  \
    '\x40\x7B\x44\x00\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00'  \
    '\x4A\x9C\x46\x00\x6A\xEA\x46\x00\x45\x1C\x47\x06\x07\x08\x06\x07'  \
    '\xDC\x07\x00\x00\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00\x80'  \
    '\x7B\x44\x00\xC0\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00\x4C'  \
    '\x9C\x46\x00\x6C\xEA\x46\x00\x46\x1C\x47\x07\x08\x09\x07\x08\xDC'  \
    '\x07\x00\x00\xD6\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0\x7B'  \
    '\x44\x00\xE0\xFA\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E\x9C'  \
    '\x46\x00\x6E\xEA\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xDC\x07'  \
    '\x00\x00\xD8\x42\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C\x44'  \
    '\x00\x00\xFB\x44\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C\x46'  \
    '\x00\x70\xEA\x46\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xDC\x07\x00'  \
    '\x00\xDA\x42\x00\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44\x00'  \
    '\x20\xFB\x44\x00\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46\x00'  \
    '\x72\xEA\x46\x00\x49\x1C\x47\x0A\x0B\x0C\x0A\x0B\xDC\x07\x00\x00'  \
    '\xDC\x42\x00\x00\x52\x43\x00\x00\x9B\x43\x00\x80\x7C\x44\x00\x40'  \
    '\xFB\x44\x00\x20\x3C\x45\x00\x68\x1C\x46\x00\x54\x9C\x46\x00\x74'  \
    '\xEA\x46\x00\x4A\x1C\x47\x52\xE6\x3C\x33\x52\xE6\x54\xE0\x03'

# Expected results for Telemetered record #2-10.
TEL_EXPECTED_FIELDS_RECORD_2_10_1_1 = (1, 2, 3, 1, 2, 2012, 101.0, 201.0, 301.0,
                                      1001.0, 2001.0, 3001.0,
                                      10001.0, 20001.0, 30001.0, 40001.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_1_2 = (2, 3, 4, 2, 3, 2012, 102.0, 202.0, 302.0,
                                      1002.0, 2002.0, 3002.0,
                                      10002.0, 20002.0, 30002.0, 40002.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_1_3 = (3, 4, 5, 3, 4, 2012, 103.0, 203.0, 303.0,
                                      1003.0, 2003.0, 3003.0,
                                      10003.0, 20003.0, 30003.0, 40003.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_1_4 = (4, 5, 6, 4, 5, 2012, 104.0, 204.0, 304.0,
                                      1004.0, 2004.0, 3004.0,
                                      10004.0, 20004.0, 30004.0, 40004.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_1_META = (1374902331, 1390820402, 1390826719, 65535,
                                          4, 10, 1374902331)


TEL_EXPECTED_FIELDS_RECORD_2_10_2_1 = (5, 6, 7, 5, 6, 2012, 105.0, 205.0, 305.0,
                                      1005.0, 2005.0, 3005.0,
                                      10005.0, 20005.0, 30005.0, 40005.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_2 = (6, 7, 8, 6, 7, 2012, 106.0, 206.0, 306.0,
                                      1006.0, 2006.0, 3006.0,
                                      10006.0, 20006.0, 30006.0, 40006.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_3 = (7, 8, 9, 7, 8, 2012, 107.0, 207.0, 307.0,
                                       1007.0, 2007.0, 3007.0,
                                       10007.0, 20007.0, 30007.0, 40007.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_4 = (8, 9, 10, 8, 9, 2012, 108.0, 208.0, 308.0,
                                       1008.0, 2008.0, 3008.0,
                                       10008.0, 20008.0, 30008.0, 40008.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_5 = (9, 10, 11, 9, 10, 2012, 109.0, 209.0, 309.0,
                                       1009.0, 2009.0, 3009.0,
                                       10009.0, 20009.0, 30009.0, 40009.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_6 = (10, 11, 12, 10, 11, 2012, 110.0, 210.0, 310.0,
                                       1010.0, 2010.0, 3010.0,
                                       10010.0, 20010.0, 30010.0, 40010.0)

TEL_EXPECTED_FIELDS_RECORD_2_10_2_META = (1374902331, 1390820403, 1390826720,  65535,
                                          6, None, 1374902331)


# Telemetered data with 3 SIO blocks.
# The first block is not one that we want, followed by 2 blocks we do want.
# The 2 vel3d_l blocks have 3 and 4 instrument records, respectively,
# plus 1 metadata per block.
TEL_SIO_PS_WA_WA = \
    '\x01\x50\x53\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x38\x33\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x31\x5F\x42\x37\x31\x34'  \
    '\x02\x00\x00\x01\x75\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x01\x02\x03\x01'  \
    '\x02\xDD\x07\x00\x00\xCA\x42\x00\x00\x49\x43\x00\x80\x96\x43\x00'  \
    '\x40\x7A\x44\x00\x20\xFA\x44\x00\x90\x3B\x45\x00\x44\x1C\x46\x00'  \
    '\x42\x9C\x46\x00\x62\xEA\x46\x00\x41\x1C\x47\x02\x03\x04\x02\x03'  \
    '\xDD\x07\x00\x00\xCC\x42\x00\x00\x4A\x43\x00\x00\x97\x43\x00\x80'  \
    '\x7A\x44\x00\x40\xFA\x44\x00\xA0\x3B\x45\x00\x48\x1C\x46\x00\x44'  \
    '\x9C\x46\x00\x64\xEA\x46\x00\x42\x1C\x47\x52\xE6\x3C\x32\x52\xE6'  \
    '\x54\xDF\x00\x0A\x03' \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x42\x30\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x32\x5F\x31\x32\x43\x36'  \
    '\x02\x00\x00\x01\xA4\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x03\x04\x05\x03'  \
    '\x04\xDD\x07\x00\x00\xCE\x42\x00\x00\x4B\x43\x00\x80\x97\x43\x00'  \
    '\xC0\x7A\x44\x00\x60\xFA\x44\x00\xB0\x3B\x45\x00\x4C\x1C\x46\x00'  \
    '\x46\x9C\x46\x00\x66\xEA\x46\x00\x43\x1C\x47\x04\x05\x06\x04\x05'  \
    '\xDD\x07\x00\x00\xD0\x42\x00\x00\x4C\x43\x00\x00\x98\x43\x00\x00'  \
    '\x7B\x44\x00\x80\xFA\x44\x00\xC0\x3B\x45\x00\x50\x1C\x46\x00\x48'  \
    '\x9C\x46\x00\x68\xEA\x46\x00\x44\x1C\x47\x05\x06\x07\x05\x06\xDD'  \
    '\x07\x00\x00\xD2\x42\x00\x00\x4D\x43\x00\x80\x98\x43\x00\x40\x7B'  \
    '\x44\x00\xA0\xFA\x44\x00\xD0\x3B\x45\x00\x54\x1C\x46\x00\x4A\x9C'  \
    '\x46\x00\x6A\xEA\x46\x00\x45\x1C\x47\x52\xE6\x3C\x33\x52\xE6\x54'  \
    '\xE0\x03' \
    '\x01\x57\x41\x31\x32\x33\x34\x35\x36\x39\x5F\x30\x31\x45\x31\x48'  \
    '\x35\x31\x46\x33\x35\x38\x33\x42\x5F\x30\x33\x5F\x37\x39\x38\x36'  \
    '\x02\x00\x00\x01\xD3\x31\x32\x33\xFF\xFF\x00\x00\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58'  \
    '\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x58\x06\x07\x08\x06'  \
    '\x07\xDD\x07\x00\x00\xD4\x42\x00\x00\x4E\x43\x00\x00\x99\x43\x00'  \
    '\x80\x7B\x44\x00\xC0\xFA\x44\x00\xE0\x3B\x45\x00\x58\x1C\x46\x00'  \
    '\x4C\x9C\x46\x00\x6C\xEA\x46\x00\x46\x1C\x47\x07\x08\x09\x07\x08'  \
    '\xDD\x07\x00\x00\xD6\x42\x00\x00\x4F\x43\x00\x80\x99\x43\x00\xC0'  \
    '\x7B\x44\x00\xE0\xFA\x44\x00\xF0\x3B\x45\x00\x5C\x1C\x46\x00\x4E'  \
    '\x9C\x46\x00\x6E\xEA\x46\x00\x47\x1C\x47\x08\x09\x0A\x08\x09\xDD'  \
    '\x07\x00\x00\xD8\x42\x00\x00\x50\x43\x00\x00\x9A\x43\x00\x00\x7C'  \
    '\x44\x00\x00\xFB\x44\x00\x00\x3C\x45\x00\x60\x1C\x46\x00\x50\x9C'  \
    '\x46\x00\x70\xEA\x46\x00\x48\x1C\x47\x09\x0A\x0B\x09\x0A\xDD\x07'  \
    '\x00\x00\xDA\x42\x00\x00\x51\x43\x00\x80\x9A\x43\x00\x40\x7C\x44'  \
    '\x00\x20\xFB\x44\x00\x10\x3C\x45\x00\x64\x1C\x46\x00\x52\x9C\x46'  \
    '\x00\x72\xEA\x46\x00\x49\x1C\x47\x52\xE6\x3C\x34\x52\xE6\x54\xE1'  \
    '\x00\x0C\x03'

# Expected results for SIO_PS_WA_WA.
# First block will produce no vel3d_l particles.
TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_1 = (3, 4, 5, 3, 4, 2013,
                                        103.0, 203.0, 303.0, 1003.0, 2003.0, 3003.0,
                                        10003.0, 20003.0, 30003.0, 40003.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_2 = (4, 5, 6, 4, 5, 2013,
                                        104.0, 204.0, 304.0, 1004.0, 2004.0, 3004.0,
                                        10004.0, 20004.0, 30004.0, 40004.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_3 = (5, 6, 7, 5, 6, 2013,
                                        105.0, 205.0, 305.0, 1005.0, 2005.0, 3005.0,
                                        10005.0, 20005.0, 30005.0, 40005.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_META = (1374902331, 1390820403, 1390826720,
                                           65535, 3, None, 1374902331)


TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_1 = (6, 7, 8, 6, 7, 2013,
                                        106.0, 206.0, 306.0, 1006.0, 2006.0, 3006.0,
                                        10006.0, 20006.0, 30006.0, 40006.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_2 = (7, 8, 9, 7, 8, 2013,
                                        107.0, 207.0, 307.0, 1007.0, 2007.0, 3007.0,
                                        10007.0, 20007.0, 30007.0, 40007.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_3 = (8, 9, 10, 8, 9, 2013,
                                        108.0, 208.0, 308.0, 1008.0, 2008.0, 3008.0,
                                        10008.0, 20008.0, 30008.0, 40008.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_4 = (9, 10, 11, 9, 10, 2013,
                                        109.0, 209.0, 309.0, 1009.0, 2009.0, 3009.0,
                                        10009.0, 20009.0, 30009.0, 40009.0)

TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_META = (1374902331, 1390820404, 1390826721,
                                           65535, 4, 12, 1374902331)


### NEW STUFF DEFS

RESOURCE_PATH = os.path.join(BASE_RESOURCE_PATH, 'vel3d_l', 'wfp', 'resource')

SIMPLE_LOG_FILE = 'tel_vel3d_l_1.dat'
YAML_FILE = 'tel_vel3d_l_1.yml'
NUM_REC_SIMPLE_LOG_FILE = 11

LARGE_LOG_FILE = 'tel_node58p1_0_wa_wfp.dat'
LARGE_YAML_FILE = 'tel_node58p1_0_wa_wfp.yml'

DEC_LOG_FILE = 'tel_node15p1.dat'
DEC_YAML_FILE = 'tel_node15p1.yml'

MIX_LOG_FILE = 'tel_vel3d_l_4.dat'
MIX_YAML_FILE = 'tel_vel3d_l_4.yml'

REC_LOG_FILE_SIMPLE = 'rec_vel3d_l_2.dat'
REC_YAML_FILE_SIMPLE = 'rec_vel3d_l_2.yml'

REC_LOG_FILE_1 = 'A0000001.dat'
REC_YAML_FILE_1 = 'A0000001.yml'

REC_LOG_FILE_2 = 'A0000001_PAPA14.dat'
REC_YAML_FILE_2 = 'A0000001_PAPA14.yml'

### END NEW STUFF DEFS


# The list of generated tests are the suggested tests, but there may
# be other tests needed to fully test your parser

@attr('UNIT', group='mi')
class Vel3dLWfpParserUnitTestCase(ParserUnitTestCase):
    """
    vel3d_l_wfp Parser unit test suite
    """
    def create_expected_results(self):
        self.create_rec_expected_results()
        self.create_tel_expected_results()

    def create_rec_expected_results(self):
        """
        This function creates the recovered data expected particle results.
        """

        self.rec_expected_particle_1_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_1_1, internal_timestamp=3281994123.0)

        self.rec_expected_particle_2_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_1, internal_timestamp=3284762584.0)

        self.rec_expected_particle_2_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_2, internal_timestamp=3287358245.0)

        self.rec_expected_particle_3_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_3_1, internal_timestamp=3290126706.0)

        self.rec_expected_particle_3_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_3_2, internal_timestamp=3292808767.0)

        self.rec_expected_particle_3_3 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_3_3, internal_timestamp=3295577228.0)

        self.rec_expected_particle_4_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_4_1, internal_timestamp=3298259289.0)

        self.rec_expected_particle_4_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_4_2, internal_timestamp=3301027750.0)

        self.rec_expected_particle_4_3 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_4_3, internal_timestamp=3303796211.0)

        self.rec_expected_particle_4_4 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_4_4, internal_timestamp=3306478272.0)

        self.rec_expected_particle_1_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_1_META, internal_timestamp=3599815519.0)

        self.rec_expected_particle_2_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_META, internal_timestamp=3583891131.0)

        self.rec_expected_particle_3_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_3_META, internal_timestamp=3599815521.0)

        self.rec_expected_particle_4_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_4_META, internal_timestamp=3599815522.0)


        self.rec_expected_particle_10_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_1, internal_timestamp=3187386123.0)

        self.rec_expected_particle_10_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_2, internal_timestamp=3190154584.0)

        self.rec_expected_particle_10_3 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_3, internal_timestamp=3192663845.0)

        self.rec_expected_particle_10_4 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_4, internal_timestamp=3195432306.0)

        self.rec_expected_particle_10_5 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_5, internal_timestamp=3198114367.0)

        self.rec_expected_particle_10_6 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_6, internal_timestamp=3200882828.0)

        self.rec_expected_particle_10_7 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_7, internal_timestamp=3203564889.0)

        self.rec_expected_particle_10_8 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_8, internal_timestamp=3206333350.0)

        self.rec_expected_particle_10_9 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_9, internal_timestamp=3209101811.0)

        self.rec_expected_particle_10_10 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_10, internal_timestamp=3211783872.0)

        self.rec_expected_particle_10_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_10_META, internal_timestamp=3599815519.0)

        
        # The following are for the multiple block file.
        self.rec_expected_particle_2_10_1_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_1_1, internal_timestamp=3218922123.0)
        
        self.rec_expected_particle_2_10_1_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_1_2, internal_timestamp=3221690584.0)

        self.rec_expected_particle_2_10_1_3 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_1_3, internal_timestamp=3224199845.0)

        self.rec_expected_particle_2_10_1_4 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_1_4, internal_timestamp=3226968306.0)

        self.rec_expected_particle_2_10_2_1 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_1, internal_timestamp=3229650367.0)

        self.rec_expected_particle_2_10_2_2 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_2, internal_timestamp=3232418828.0)

        self.rec_expected_particle_2_10_2_3 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_3, internal_timestamp=3235100889.0)

        self.rec_expected_particle_2_10_2_4 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_4, internal_timestamp=3237869350.0)

        self.rec_expected_particle_2_10_2_5 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_5, internal_timestamp=3240637811.0)

        self.rec_expected_particle_2_10_2_6 = Vel3dLWfpInstrumentRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_6, internal_timestamp=3243319872.0)

        self.rec_expected_particle_2_10_1_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_1_META, internal_timestamp=3599815519.0)

        self.rec_expected_particle_2_10_2_meta = Vel3dLWfpMetadataRecoveredParticle(
            REC_EXPECTED_FIELDS_RECORD_2_10_2_META, internal_timestamp=3599815520.0)

    def create_tel_expected_results(self):
        """
        This function creates the telemetered data expected particle results.
        """
        # The first number refers to the SIO record number.
        # The second number refers to the FSI record within the SIO block.
        self.tel_expected_particle_1_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_1_1, internal_timestamp=3597613323.0)

        self.tel_expected_particle_2_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_1, internal_timestamp=3600381784.0)

        self.tel_expected_particle_2_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_2, internal_timestamp=3602891045.0)

        self.tel_expected_particle_3_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_3_1, internal_timestamp=3605659506.0)

        self.tel_expected_particle_3_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_3_2, internal_timestamp=3608341567.0)

        self.tel_expected_particle_3_3 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_3_3, internal_timestamp=3611110028.0)

        self.tel_expected_particle_4_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_4_1, internal_timestamp=3613792089.0)

        self.tel_expected_particle_4_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_4_2, internal_timestamp=3616560550.0)

        self.tel_expected_particle_4_3 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_4_3, internal_timestamp=3619329011.0)

        self.tel_expected_particle_4_4 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_4_4, internal_timestamp=3622011072.0)

        self.tel_expected_particle_1_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_1_META, internal_timestamp=3583891131.0)

        self.tel_expected_particle_2_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_META, internal_timestamp=3583891131.0)

        self.tel_expected_particle_3_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_3_META, internal_timestamp=3583891131.0)

        self.tel_expected_particle_4_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_4_META, internal_timestamp=3583891131.0)


        self.tel_expected_particle_10_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_1, internal_timestamp=3502918923.0)

        self.tel_expected_particle_10_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_2, internal_timestamp=3505687384.0)

        self.tel_expected_particle_10_3 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_3, internal_timestamp=3508196645.0)

        self.tel_expected_particle_10_4 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_4, internal_timestamp=3510965106.0)

        self.tel_expected_particle_10_5 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_5, internal_timestamp=3513647167.0)

        self.tel_expected_particle_10_6 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_6, internal_timestamp=3516415628.0)

        self.tel_expected_particle_10_7 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_7, internal_timestamp=3519097689.0)

        self.tel_expected_particle_10_8 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_8, internal_timestamp=3521866150.0)

        self.tel_expected_particle_10_9 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_9, internal_timestamp=3524634611.0)

        self.tel_expected_particle_10_10 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_10, internal_timestamp=3527316672.0)

        self.tel_expected_particle_10_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_10_META, internal_timestamp=3583891131.0)

        # The following are for the multiple SIO block file.
        self.tel_expected_particle_2_10_1_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_1_1, internal_timestamp=3534454923.0)

        self.tel_expected_particle_2_10_1_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_1_2, internal_timestamp=3537223384.0)

        self.tel_expected_particle_2_10_1_3 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_1_3, internal_timestamp=3539819045.0)

        self.tel_expected_particle_2_10_1_4 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_1_4, internal_timestamp=3542587506.0)

        self.tel_expected_particle_2_10_2_1 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_1, internal_timestamp=3545269567.0)

        self.tel_expected_particle_2_10_2_2 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_2, internal_timestamp=3548038028.0)

        self.tel_expected_particle_2_10_2_3 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_3, internal_timestamp=3550720089.0)

        self.tel_expected_particle_2_10_2_4 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_4, internal_timestamp=3553488550.0)

        self.tel_expected_particle_2_10_2_5 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_5, internal_timestamp=3556257011.0)

        self.tel_expected_particle_2_10_2_6 = Vel3dLWfpInstrumentParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_6, internal_timestamp=3558939072.0)

        self.tel_expected_particle_2_10_1_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_1_META, internal_timestamp=3583891131.0)

        self.tel_expected_particle_2_10_2_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_RECORD_2_10_2_META, internal_timestamp=3583891131.0)


        self.tel_expected_particle_sio_ps_wa_wa_2_1 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_1, internal_timestamp=3571355045.0)

        self.tel_expected_particle_sio_ps_wa_wa_2_2 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_2, internal_timestamp=3574123506.0)

        self.tel_expected_particle_sio_ps_wa_wa_2_3 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_3, internal_timestamp=3576805567.0)

        self.tel_expected_particle_sio_ps_wa_wa_2_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_2_META, internal_timestamp=3583891131.0)

        self.tel_expected_particle_sio_ps_wa_wa_3_1 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_1, internal_timestamp=3579574028.0)

        self.tel_expected_particle_sio_ps_wa_wa_3_2 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_2, internal_timestamp=3582256089.0)

        self.tel_expected_particle_sio_ps_wa_wa_3_3 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_3, internal_timestamp=3585024550.0)

        self.tel_expected_particle_sio_ps_wa_wa_3_4 = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_4, internal_timestamp=3587793011.0)

        self.tel_expected_particle_sio_ps_wa_wa_3_meta = Vel3dLWfpSioMuleMetadataParticle(
            TEL_EXPECTED_FIELDS_SIO_PS_WA_WA_3_META, internal_timestamp=3583891131.0)

    def create_rec_parser(self, file_handle):
        """
        This function creates a Vel3d_l_Wfp parser for recovered data.
        """
        parser = Vel3dLWfpParser(self.rec_config, file_handle, self.exception_callback)
        return parser

    def create_tel_parser(self, file_handle):
        """
        This function creates a Vel3d_l_Wfp_Sio_Mule parser for telemetered data.
        """
        parser = Vel3dLWfpSioParser(self.tel_config, file_handle, self.exception_callback)
        return parser

    def open_file(self, filename):
        file = open(os.path.join(RESOURCE_PATH, filename), mode='rb')
        return file

    def open_file_write(self, filename):
        file = open(os.path.join(RESOURCE_PATH, filename), mode='w')
        return file

    def verify_contents(self, actual_particle, expected_particle):
        self.assertEqual(actual_particle, [expected_particle])
        self.assert_(isinstance(self.publish_callback_value, list))

    def setUp(self):
        ParserUnitTestCase.setUp(self)
        self.rec_config = {
            DataSetDriverConfigKeys.PARTICLE_MODULE:
                'mi.dataset.parser.vel3d_l_wfp',
            DataSetDriverConfigKeys.PARTICLE_CLASS:
                ['Vel3dLWfpInstrumentRecoveredParticle',
                 'Vel3dLWfpMetadataRecoveredParticle']
        }

        self.tel_config = {
            DataSetDriverConfigKeys.PARTICLE_MODULE:
                'mi.dataset.parser.vel3d_l_wfp',
            DataSetDriverConfigKeys.PARTICLE_CLASS:
                ['Vel3dLWfpInstrumentParticle',
                 'Vel3dLWfpSioMuleMetadataParticle']
        }

        # Define test data particles and their associated timestamps which will be 
        # compared with returned results

        self.rec_file_ingested_value = None
        self.publish_callback_value = []
        self.exception_callback_value = []
        self.maxDiff = None
        self.create_expected_results()

    def test_rec_excess_data(self):
        """
        This test verifies that excess bytes at the end of the metadata record
        are detected and a sample exception is raised.
        """
        log.info("============== START RECOVERED EXCESS DATA ==================")
        log.info("Recovered Excess Data length %d", len(REC_EXCESS_METADATA))
        input_file = StringIO(REC_EXCESS_METADATA)
        self.parser = self.create_rec_parser(input_file)

        with self.assertRaises(SampleException):
            result = self.parser.get_records(1)

        log.info("============== END RECOVERED EXCESS DATA ==================")

    def test_rec_get_many(self):
        """
        Read test data and pull out multiple data particles at one time.
        Assert that the results are those we expected.
        """
        log.info("=================== START RECOVERED MANY ======================")
        log.info("Recovered Many length %d", len(REC_RECORD_4))
        input_file = StringIO(REC_RECORD_4)
        self.parser = self.create_rec_parser(input_file)

        log.info("REC MANY VERIFY RECORDS 1-4")
        result = self.parser.get_records(4)
        self.assertEqual(result, [self.rec_expected_particle_4_1,
                                  self.rec_expected_particle_4_2,
                                  self.rec_expected_particle_4_3,
                                  self.rec_expected_particle_4_4])

        self.assertEqual(self.publish_callback_value[0],
            self.rec_expected_particle_4_1)

        self.assertEqual(self.publish_callback_value[1],
            self.rec_expected_particle_4_2)

        self.assertEqual(self.publish_callback_value[2],
            self.rec_expected_particle_4_3)

        self.assertEqual(self.publish_callback_value[3],
            self.rec_expected_particle_4_4)

        log.info("REC MANY VERIFY METADATA RECORD")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_4_meta)

        log.info("=================== END RECOVERED MANY ======================")

    def test_rec_long_stream(self):
        """
        Test a long stream
        """
        log.info("============== START RECOVERED LONG STREAM ==================")
        log.info("Recovered Long Stream length %d", len(REC_RECORD_10))
        input_file = StringIO(REC_RECORD_10)
        self.parser = self.create_rec_parser(input_file)

        result = self.parser.get_records(10)
        self.assertEqual(result, [self.rec_expected_particle_10_1,
                                  self.rec_expected_particle_10_2,
                                  self.rec_expected_particle_10_3,
                                  self.rec_expected_particle_10_4,
                                  self.rec_expected_particle_10_5,
                                  self.rec_expected_particle_10_6,
                                  self.rec_expected_particle_10_7,
                                  self.rec_expected_particle_10_8,
                                  self.rec_expected_particle_10_9,
                                  self.rec_expected_particle_10_10])

        log.info("REC LONG STREAM VERIFY METADATA RECORD")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_10_meta)

        self.assertEqual(self.exception_callback_value, [])

        log.info("============== END RECOVERED LONG STREAM ==================")


    def test_rec_multiple_blocks(self):
        """
        This function verifies that multiple blocks can be read.
        """
        log.info("============ START RECOVERED MULTIPLE BLOCKS ================")
        log.info("Recovered Multiple Blocks length %d", len(REC_RECORD_2_10))
        input_file = StringIO(REC_RECORD_2_10)
        self.parser = self.create_rec_parser(input_file)

        result = self.parser.get_records(12)
        self.assertEqual(result, [self.rec_expected_particle_2_10_1_1,
                                  self.rec_expected_particle_2_10_1_2,
                                  self.rec_expected_particle_2_10_1_3,
                                  self.rec_expected_particle_2_10_1_4,
                                  self.rec_expected_particle_2_10_1_meta,
                                  self.rec_expected_particle_2_10_2_1,
                                  self.rec_expected_particle_2_10_2_2,
                                  self.rec_expected_particle_2_10_2_3,
                                  self.rec_expected_particle_2_10_2_4,
                                  self.rec_expected_particle_2_10_2_5,
                                  self.rec_expected_particle_2_10_2_6,
                                  self.rec_expected_particle_2_10_2_meta])

        log.info("============ END RECOVERED MULTIPLE BLOCKS ================")

    def test_rec_simple_no_decimation(self):
        """
        Read test data and pull out data particles one at a time.
        Assert that the results are those we expected.
        """
        log.info("========== START RECOVERED SIMPLE WITHOUT DECIMATION ==========")
        log.info("Recovered Simple length %d", len(REC_RECORD_3))
        input_file = StringIO(REC_RECORD_3)
        self.parser = self.create_rec_parser(input_file)

        log.info("REC SIMPLE WITHOUT DECIMATION VERIFY RECORD 1")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_3_1)

        log.info("REC SIMPLE WITHOUT DECIMATION VERIFY RECORD 2")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_3_2)

        log.info("REC SIMPLE WITHOUT DECIMATION VERIFY RECORD 3")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_3_3)

        log.info("REC SIMPLE WITHOUT DECIMATION VERIFY METADATA RECORD")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.rec_expected_particle_3_meta)

        log.info("========== END RECOVERED SIMPLE WITHOUT DECIMATION ==========")

    def test_tel_multiple_sio_blocks(self):
        """
        This function verifies that multiple SIO blocks can be read.
        """
        log.info("========== START TELEMETERED MULTIPLE SIO BLOCKS ==============")
        log.info("Telemetered Multiple SIO Blocks length %d", len(TEL_RECORD_2_10))
        input_file = StringIO(TEL_RECORD_2_10)
        self.parser = self.create_tel_parser(input_file)

        result = self.parser.get_records(12)
        self.assertEqual(result, [self.tel_expected_particle_2_10_1_1,
                                  self.tel_expected_particle_2_10_1_2,
                                  self.tel_expected_particle_2_10_1_3,
                                  self.tel_expected_particle_2_10_1_4,
                                  self.tel_expected_particle_2_10_1_meta,
                                  self.tel_expected_particle_2_10_2_1,
                                  self.tel_expected_particle_2_10_2_2,
                                  self.tel_expected_particle_2_10_2_3,
                                  self.tel_expected_particle_2_10_2_4,
                                  self.tel_expected_particle_2_10_2_5,
                                  self.tel_expected_particle_2_10_2_6,
                                  self.tel_expected_particle_2_10_2_meta])

        log.info("========== END TELEMETERED MULTIPLE SIO BLOCKS ==============")

    def test_tel_not_my_sio_block(self):
        """
        This function verifies that non-WA SIO blocks are successfully ignored.
        """
        log.info("========== START TELEMETERED NOT MY SIO BLOCK ==============")
        log.info("Not my SIO Block length %d", len(TEL_SIO_PS_WA_WA))
        input_file = StringIO(TEL_SIO_PS_WA_WA)
        self.parser = self.create_tel_parser(input_file)

        result = self.parser.get_records(9)
        self.assertEqual(result, [self.tel_expected_particle_sio_ps_wa_wa_2_1,
                                  self.tel_expected_particle_sio_ps_wa_wa_2_2,
                                  self.tel_expected_particle_sio_ps_wa_wa_2_3,
                                  self.tel_expected_particle_sio_ps_wa_wa_2_meta,
                                  self.tel_expected_particle_sio_ps_wa_wa_3_1,
                                  self.tel_expected_particle_sio_ps_wa_wa_3_2,
                                  self.tel_expected_particle_sio_ps_wa_wa_3_3,
                                  self.tel_expected_particle_sio_ps_wa_wa_3_4,
                                  self.tel_expected_particle_sio_ps_wa_wa_3_meta])

        log.info("========== END TELEMETERED NOT MY SIO BLOCK ==============")


    def test_tel_simple_no_decimation(self):
        """
        Read test data and pull out data particles one at a time.
        Assert that the results are those we expected.
        This test verifies that a missing decimation factor is handled correctly.
        """
        log.info("========= START TELEMETERED SIMPLE NO DECIMATION =============")
        log.info("Telemetered Simple length %d", len(TEL_RECORD_1))
        input_file = StringIO(TEL_RECORD_1)
        self.parser = self.create_tel_parser(input_file)

        log.info("TEL SIMPLE NO DECIMATION VERIFY RECORD 1")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.tel_expected_particle_1_1)

        log.info("TEL SIMPLE NO DECIMATION VERIFY METADATA RECORD")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.tel_expected_particle_1_meta)

        log.info("========= END TELEMETERED SIMPLE NO DECIMATION ==============")

    def test_tel_simple_with_decimation(self):
        """
        Read test data and pull out data particles one at a time.
        Assert that the results are those we expected.
        This test verifies that a decimation factor is handled correctly.
        """
        log.info("========= START TELEMETERED SIMPLE WITH DECIMATION ===========")
        log.info("Simple length %d", len(TEL_RECORD_2))
        input_file = StringIO(TEL_RECORD_2)
        self.parser = self.create_tel_parser(input_file)

        log.info("SIMPLE WITH DECIMATION VERIFY RECORD 1")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.tel_expected_particle_2_1)

        log.info("SIMPLE WITH DECIMATION VERIFY RECORD 2")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.tel_expected_particle_2_2)

        log.info("SIMPLE WITH DECIMATION VERIFY METADATA RECORD")
        result = self.parser.get_records(1)
        self.verify_contents(result, self.tel_expected_particle_2_meta)

        log.info("========= END TELEMETERED SIMPLE WITH DECIMATION =============")

    ################## END OLDER TESTS -- START NEW TESTS #########################

    def test_rec_parser_simple(self):
        """
        Read data from a file and pull out data particles
        one at a time. Verify that the results are those we expected.
        """
        log.info('===== START YAML TEST =====')
        in_file = self.open_file(REC_LOG_FILE_SIMPLE)
        parser = self.create_rec_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(20)
        self.assert_particles(result, REC_YAML_FILE_SIMPLE, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END YAML TEST =====')

    def test_rec_parser_yaml(self):
        """
        Read data from a file and pull out data particles
        one at a time. Verify that the results are those we expected.
        """
        log.info('===== START YAML TEST =====')
        in_file = self.open_file(REC_LOG_FILE_1)
        parser = self.create_rec_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(15000)
        self.assert_particles(result, REC_YAML_FILE_1, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END YAML TEST =====')

    def test_rec_parser_large_yaml(self):
        """
        Read data from a file and pull out data particles
        one at a time. Verify that the results are those we expected.
        """
        log.info('===== START YAML TEST =====')
        in_file = self.open_file(REC_LOG_FILE_2)
        parser = self.create_rec_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(25000)
        self.assert_particles(result, REC_YAML_FILE_2, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END YAML TEST =====')

    def test_tel_parser_yaml_simple(self):
        """
        Read data from a file and pull out data particles
        one at a time. Verify that the results are those we expected.
        """
        log.info('===== START YAML TEST =====')
        in_file = self.open_file(SIMPLE_LOG_FILE)
        parser = self.create_tel_parser(in_file)

        # In a single read, get all particles in this file.
        number_expected_results = NUM_REC_SIMPLE_LOG_FILE
        result = parser.get_records(number_expected_results)
        self.assert_particles(result, YAML_FILE, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END YAML TEST =====')

    def test_tel_parser_yaml_no_decimation(self):
        """
        Read data from a log file with no decimation.
        Verify that the results are those we expected.
        """
        log.info('===== START NO DEC TEST =====')
        in_file = self.open_file(LARGE_LOG_FILE)
        parser = self.create_tel_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(500)
        self.assert_particles(result, LARGE_YAML_FILE, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END NO DEC TEST =====')

    def test_tel_parser_yaml_with_decimation(self):
        """
        Read data from a log file with a decimation factor.
        Verify that the results are those we expected.
        """
        log.info('===== START DEC TEST =====')
        in_file = self.open_file(DEC_LOG_FILE)
        parser = self.create_tel_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(500)
        self.assert_particles(result, DEC_YAML_FILE, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END DEC TEST =====')

    def test_tel_parser_yaml_decimation_mix(self):
        """
        Some records have a decimation factor, others don't.
        Verify that the results are those we expected.
        """
        log.info('===== START MIX TEST =====')
        in_file = self.open_file(MIX_LOG_FILE)
        parser = self.create_tel_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(15)
        self.assert_particles(result, MIX_YAML_FILE, RESOURCE_PATH)

        in_file.close()
        self.assertListEqual(self.exception_callback_value, [])

        log.info('===== END MIX TEST =====')

    def create_rec_yml_file(self):
        """
        Create a yml file corresponding to an actual recovered dataset. This is not an actual test - it allows
        us to create what we need for integration testing, i.e. a yml file.
        """
        in_file = self.open_file(REC_LOG_FILE_2)
        parser = self.create_rec_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(100000)

        self.particle_to_yml(result, REC_YAML_FILE_2)

    def create_tel_yml_file(self):
        """
        Create a yml file corresponding to an actual recovered dataset. This is not an actual test - it allows
        us to create what we need for integration testing, i.e. a yml file.
        """
        in_file = self.open_file(LARGE_LOG_FILE)
        parser = self.create_tel_parser(in_file)

        # In a single read, get all particles in this file.
        result = parser.get_records(500)

        self.particle_to_yml(result, LARGE_YAML_FILE)

    def particle_to_yml(self, particles, filename):
        """
        This is added as a testing helper, not actually as part of the parser tests. Since the same particles
        will be used for the driver test it is helpful to write them to .yml in the same form they need in the
        results.yml fids here.
        """
        # open write append, if you want to start from scratch manually delete this fid
        fid = self.open_file_write(filename)
        fid.write('header:\n')
        fid.write("    particle_object: 'MULTIPLE'\n")
        fid.write("    particle_type: 'MULTIPLE'\n")
        fid.write('data:\n')
        for i in range(0, len(particles)):
            particle_dict = particles[i].generate_dict()
            fid.write('  - _index: %d\n' % (i+1))
            fid.write('    particle_object: %s\n' % particles[i].__class__.__name__)
            fid.write('    particle_type: %s\n' % particle_dict.get('stream_name'))
            fid.write('    internal_timestamp: %f\n' % particle_dict.get('internal_timestamp'))
            for val in particle_dict.get('values'):
                if val.get('value') is None:
                    fid.write('    %s: %s\n' % (val.get('value_id'), '!!null'))
                elif isinstance(val.get('value'), float):
                    fid.write('    %s: %16.12f\n' % (val.get('value_id'), val.get('value')))
                elif isinstance(val.get('value'), str):
                    fid.write("    %s: '%s'\n" % (val.get('value_id'), val.get('value')))
                else:
                    fid.write('    %s: %s\n' % (val.get('value_id'), val.get('value')))
        fid.close()
